syntax = "proto3";

package dadc.sdsp_a.v0;
//option go_package = "./pb";

import "common.proto" ;

// エアモビリティ向け空間情報基盤
// Connectで得たトークンをheaderにuseridと共に設定する
service SDSP_A {
    // サーバーへの接続（ログイン）
    //
    // ユーザIDとパスワードでトークンを得る
    rpc GEN_Connect(SpatialIdentifier.Common.Protocol.ConnectRequest) returns(SpatialIdentifier.Common.Protocol.Token){} // アクセストークン取得

    // 飛行可能な空域取得
    //
    // 指定した領域および時刻で飛行可能な空域空間の空間ID群を得る。
    // 空域空間の値の取得にはGetValue()を利用する。
    rpc AIM_SelectAirspaceArrangement(SelectAirspaceArrangementRequest) returns (SelectAirspaceArrangementResponse){} 

     // 飛行可能な空域のストリームによる取得。
    //
    // 指定した領域および時刻で飛行可能な空域空間の空間ID群をストリームで得る。
    // 次のようなケースに利用する。
    // ・大量のデータを分割して取得
    // ・変化を取得
    rpc AIM_SelectAirspaceArrangementStream(SelectAirspaceArrangementRequest) returns (stream AirspaceArrangement){}    

    // 空間情報取得
    //
    // リスク値などの空間情報の値を得る。
    // Airspace以外（バリアなど）の取得も可能（ファイルimportではなくオンラインでの取得にも利用）
    rpc AIM_GetValue(GetValueRequest) returns (GetValuetResponse){} 

    // 空域登録
    //
    // 各種形状の空域空間を空間ID群で登録する。
    // エリア予約（飛行計画予約）の重複はエラー。
    rpc AIM_PutAirspace(PutAirspaceRequest) returns (PutAirspaceResponse){} 

    // 空域予約
    //
    // 飛行計画（各種形状の空域空間）を空間ID群で登録する。
    // 重複はエラー
    rpc AIM_PutReserveArea(PutReserveAreaRequest) returns (PutAirspaceResponse){} 

    // 空域情報取得
    //
    // PutでUserが登録した空域のID(object_id)を取得する。
    rpc AIM_SelectAirspace(SelectAirspaceRequest) returns (SelectAirspaceResponse){} 

    // 空域削除
    //
    // Userが登録した空域を削除する。
    rpc AIM_Delete(DeleteRequest) returns (DeleteResponse){} 
}

// AIM_SelectAirspaceArrangement入力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message SelectAirspaceArrangementRequest {
    SpatialFigure figure = 1 ; // 取得する領域
    SpatialIdentifier.Common.Protocol.Period period = 2 ; // 取得する時間帯
}

// AIM_SelectAirspaceArrangement出力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message SelectAirspaceArrangementResponse {
    SpatialFigure flyable_space = 1 ; // 飛行可能領域
    ErrorCode error = 20 ;
}

// AIM_SelectAirspaceArrangement出力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message AirspaceArrangement {
    oneof info {
        SpatialFigure flyable_space = 1 ; // 飛行可能領域
        SpatialFigure occupied_space = 2 ; // 飛行可能領域から閉塞領域に変更された領域
        ErrorCode error = 20 ;
    }
}

// AIM_GetValue入力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message GetValueRequest {
    SpatialFigure figure = 1 ; // 取得する領域
    repeated ObjectType request_type = 2 ; // 取得するオブジェクトのタイプ

    enum ObjectType { // 対象物
        BARRIER = 0 ; // Terrain,Building
        WEATHER = 1 ;
        Airspace_AIRAREA = 2 ; // Airspaceについては種別ごとに指定可能とする。
        Airspace_EMERGENCY = 3 ; // Airspaceについては種別ごとに指定可能とする。
        Airspace_RESERCVE_AREA = 4 ; // Airspaceについては種別ごとに指定可能とする。
        MICROWAVE = 5 ; // 検討中
        GROUND_RISK = 6 ; // 検討中
    }
}

// AIM_GetValue出力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message GetValuetResponse {
    repeated SpatialIdentifierInformation values = 1 ; 
    ErrorCode error = 20 ;
}

// AIM_PutAirspaceRequest入力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message PutAirspaceRequest{ // 設定できるエリアの種別（AirspaceInfo）はユーザ権限による
    int64 object_id = 1 ; // 登録ID。0の場合は新規登録。既存のIDではappend、User名が一致していない場合はエラー。
    repeated SpatialFigure area = 2 ; // 設定するエリア。
    AirspaceValue value = 3 ; // areaに設定する値。予約空域（飛行計画予約）の重複はエラー。
}

// AIM_PutAirspaceArrangementRequest出力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message PutAirspaceResponse {
    int64 object_id = 1 ; // 登録ID
    ErrorCode error = 20 ;
}

// AIM_PutReserveArea入力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message PutReserveAreaRequest{ 
    int64 object_id = 1 ; // 登録ID。0の場合は新規登録。既存のIDではappend、User名が一致していない場合はエラー。
    repeated SpatialFigure area = 2 ; // 設定するエリア。
    ReserveAreaValue value = 3 ; // 予約空域（飛行計画予約）
}

// AIM_SelectAirspaceRequest入力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message SelectAirspaceRequest {
    repeated SpatialFigure area = 1 ; // 対象エリア。指定がない場合はユーザーが登録したエリアすべて（飛行計画予約含む）。
}

// AIM_SelectAirspaceRequest出力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message SelectAirspaceResponse {
    repeated int64 object_id = 1 ; // 登録ID。
    ErrorCode error = 20 ;
}

// AIM_DeleteRequest入力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message DeleteRequest {
    repeated int64 object_id = 1 ; // リクエストしたUserIDが登録したUserIDと不一致の場合はエラー。
}

// AIM_DeleteRequest出力パラメータ定義
// ユーザ追加は要素番号30以降を利用すること
message DeleteResponse {
    ErrorCode error = 20 ;
}

// エラーコード
enum ErrorCode {
    ErrorCode_UNSPECIFIED = 0 ;
    ErrorCode_Duplicate = 1 ; // 重複
    ErrorCode_AccessDeny = 2 ; // アクセス権限なし
}

// エリアや空間の領域の指定
message SpatialFigure {
    oneof figure { 
        SpatialIdentifier.Common.Protocol.SpatialIdentification identification = 1 ; // [oneof figure]
        Tube tube = 2 ; // [oneof figure]
        Polygon polygon = 3 ;// [oneof figure]
    }

    message Tube { // 円筒形形状
        SpatialIdentifier.Common.Protocol.Point start = 1 ; // 始点座標
        SpatialIdentifier.Common.Protocol.Point end = 2 ; // 終点座標
        float radian = 3 ; // 半径(m)
    }

    message Polygon { // 多角形（表現形式検討中）
    }
}

// 空間IDの値
message SpatialIdentifierInformation {
    SpatialIdentifier.Common.Protocol.SpatialIdentification identification = 1 ; // 空間ID
    SpatialValue value = 2 ; // バリア空間情報
}

message SpatialValue {
    oneof infomation {
        PhysicalBarrierValue barrier = 1 ; // [oneof infomation]
        WeatherValue wether = 2 ; //  [oneof infomation]
        AirspaceValue airspace = 3 ; // [oneof infomation]
        ReserveAreaValue reserve_area = 4 ; // [oneof infomation]
    }

    RiskValue risk = 10 ;
    message RiskValue {
        float risk = 1 ; //　リスク値。オプショナル。
    }
}

// 物標。地上の物理的な障害物
// 空域のバリア（ロジカルなバリア）はAirspaceで定義する。
message PhysicalBarrierValue {
    SpatialIdentifier.Common.Protocol.Period period = 2 ; // 有効期間

    oneof barrier_info {
        Terrain terrain = 3 ; // 地形 [oneof barrier_info]
        Building building = 4 ; // 建物 [oneof barrier_info]
        //Airspace Airspace = 5 ; // 空域
        //ローカルエリア属性。ユーザアクセス権限を考慮。
    }

    /*
    enum BarrierAttribute {
        NONE = 0 ; // 障害物なしはデータなしとして扱うべき（値としては削除）※5
        LOGICAL = 1 ; // 論理的障害物あり
        PHYSICAL = 2 ; // 物理的障害物あり
    }
    */

    message Terrain {
        TerrainAttribute attr = 1 ;
        string reference = 2 ; // 素となる情報へのリンク　

        enum TerrainAttribute{ // 
            BUILDING = 0 ; // 地表面または地下を含まない。利用されることはない（GetValueRequest()でBARRIERが指定された際には建物を含まないバリア情報は返らない）。
            INCLUDE_GROUND = 1 ; // 地面（地表面および地下）
            UNDER_GROUND = 2 ; // ボクセル全体が地下（地表面と地下の識別が可能な場合）
        }
    }

    message Building {
        BuildingDefAttribute attr = 1 ;
        string reference = 4 ; // 素となる情報へのリンク　

        enum BuildingDefAttribute{ 
            WITHOUT_BUILDING = 0 ;// 建物等を含まない。利用されることはない（GetValueRequest()でBARRIERが指定された際には建物を含まないバリア情報は返らない）。
            INCLUDE_BUILDING = 1 ;// 建物を含む。（境界もしくは建物内）
            INSIDE_BUILDING = 2 ;// ボクセル全体が建物内（教会と建物内の識別が可能な場合）
        }
    }
}

// 気象（2次元表現化については課題）
message WeatherValue {
    oneof weather_info {
        CurrentWeather current_weather = 1 ; // [oneof weather_info]
        Forecast forecast = 2 ; // [oneof weather_info]
    }

    // 現況
    message CurrentWeather { // 無効データの表現方法は課題
        int64 time = 1 ; // 時刻
        float wind_direction = 2 ; // 風向(degree)
        float wind_speed = 3 ; // 風速(kt)
        float cloud_rate = 4 ; // 雲の割合(%)
        float temperature = 5 ; // 気温（°C）
        float dew_point = 6 ; // 露点温度（°C）
        float pressure = 7 ; // 気圧(hPa)
        float precipitation = 8 ; // 降水量（mm/h）
        string gggg = 20 ; // 運航上重要な気象
    }

    // 予報
    message Forecast {
        int64 time = 1 ; // 時刻
        float wind_direction = 2 ; // 風向(degree)
        float wind_speed = 3 ; // 風速(kt)
        float cloud_rate = 4 ; // 雲の割合(%)
        float precipitation = 8 ; // 降水量（mm/h）
    }
}

// 空域空間の情報
message AirspaceValue {
    oneof Airspace_info {
        AirArea area = 1 ; // [oneof Airspace_info] 飛行空域
        Emergency emergency = 2 ; // [oneof Airspace_info] 緊急用務空域
        // ReserveArea reserve_area = 3 ; // 予約はPutReserveAreaを利用するよう修正
    }

    message AirArea {
        AirAreaAttribute attr = 1 ; // RA        
        string reference = 2 ; // 素となる情報へのリンク　

        enum AirAreaAttribute{
            FREE = 0 ; // 制限なし。利用されることはない（PutAirspaceArrangementRequest()では設定せずDeleteを利用する,GetValuetResponse()でFreeの場合は空間IDは返却されない）
            P = 1 ; // 飛行禁止
            R = 2 ; // 飛行制限
            K = 3 ; // 訓練等空域
            N = 5; // 一時制限
        }
    }

    // 緊急用務空域
    message Emergency {
        //Emergency attr = 1 ; // 不要？
        string reference = 4 ; // 素となる情報へのリンク

        //enum Emergency { // EC（不要？）
        //    VACANT = 0 ; // 閉鎖無し。利用されることはない（PutAirspaceArrangementRequest()では設定せずDeleteを利用する,GetValuetResponse()でVacantの場合は空間IDは返却されない）
        //    OCCUPY = 1 ; // 空域閉鎖
        //}
    }

}

// 空域予約もしくは飛行計画予約
message ReserveAreaValue {
    SpatialIdentifier.Common.Protocol.Period period = 1 ; // 有効期間
    string reference = 2 ; // 素となる情報へのリンク
}

// 検討中
message MicroWave {
    float RSI = 1  ;// 電波強度
}

// 検討中
message GroundRisk {
    float risk = 1 ; //　リスク値
}
